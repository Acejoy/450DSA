#include<bits/stdc++.h>
using namespace std;





    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       // your code here
       vector<int> v;
       v.push_back(a[0]);
       
       for(int i=1;i<n;i++)
       {
           //checking if the new element is less then the starting element then we could just add it to the starting as it can start a new list
           if(a[i]<v[0])
           v[0]=a[i];
           else if(v[v.size()-1]<a[i]) //is the current element is greater then the last element of the array
           v.push_back(a[i]);
           else
           {
              //else we would find a lower bound because it can add to a new element and we could form a new list with this element as a part of the list
               std::vector<int>::iterator it;
               it=lower_bound(v.begin(),v.end(),a[i]);
               int k=it-v.begin();
               v[k]=a[i];
           }
       }
       
       return v.size();
    }

// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t,n;
    cin>>t;
    while(t--)
    {
        //taking size of array
        cin>>n;
        int a[n];
        
        //inserting elements to the array
        for(int i=0;i<n;i++)
            cin>>a[i];
        
        //calling method longestSubsequence()
        cout << longestSubsequence(n, a) << endl;
    }
}
  // } Driver Code Ends
